#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

pthread_mutex_t mutexA = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t mutexB = PTHREAD_MUTEX_INITIALIZER;

#define TIMEOUT_MICROSECONDS 100000

int try_lock_with_timeout(pthread_mutex_t *mutex) {
    struct timespec timeout;
    timeout.tv_sec = 0;
    timeout.tv_nsec = TIMEOUT_MICROSECONDS * 1000;

    return pthread_mutex_timedlock(mutex, &timeout);
}

void *threadA(void *arg) {
    int retry_count = 0;

    while (retry_count < 5) {
        if (try_lock_with_timeout(&mutexA) == 0) {
            printf("Thread A acquired mutexA\n");

            if (try_lock_with_timeout(&mutexB) == 0) {
                printf("Thread A acquired mutexB\n");
                // Do work with both mutexes
                pthread_mutex_unlock(&mutexB);
            } else {
                printf("Thread A couldn't acquire mutexB\n");
            }

            pthread_mutex_unlock(&mutexA);
            break;
        } else {
            printf("Thread A couldn't acquire mutexA, retrying...\n");
            retry_count++;
        }
    }

    return NULL;
}

void *threadB(void *arg) {
    int retry_count = 0;

    while (retry_count < 5) {
        if (try_lock_with_timeout(&mutexB) == 0) {
            printf("Thread B acquired mutexB\n");

            if (try_lock_with_timeout(&mutexA) == 0) {
                printf("Thread B acquired mutexA\n");
                // Do work with both mutexes
                pthread_mutex_unlock(&mutexA);
            } else {
                printf("Thread B couldn't acquire mutexA\n");
            }

            pthread_mutex_unlock(&mutexB);
            break;
        } else {
            printf("Thread B couldn't acquire mutexB, retrying...\n");
            retry_count++;
        }
    }

    return NULL;
}

int main() {
    pthread_t tidA, tidB;

    if (pthread_create(&tidA, NULL, threadA, NULL) != 0) {
        perror("pthread_create");
        return 1;
    }

    if (pthread_create(&tidB, NULL, threadB, NULL) != 0) {
        perror("pthread_create");
        return 1;
    }

    pthread_join(tidA, NULL);
    pthread_join(tidB, NULL);

    return 0;
}



output:
xor    edx, edx
       mov    eax, 1 
       mov    ecx, edx
       mov    r8d, edx
       mov    r9d, edx
       npad   13
$LL3@main:
       inc    r9
       add    r8, 2
       add    rcx, 3
       add    r9, rax                           ;; r9  = 2  8 18 32 50 …
       add    r8, rax                           ;; r8  = 3 10 21 36 55 …
       add    rcx, rax                          ;; rcx = 4 12 24 40 60 …
       add    rdx, rax                          ;; rdx = 1  6 15 28 45 …
       add    rax, 4                            ;; rax = 1  5  9 13 17 …
       cmp    rax, 1000000000                   ;; i <= 1000000000 ?
       jle    SHORT $LL3@main                   ;; yes, so loop back


...Program finished with exit code 0
Press ENTER to exit console.
